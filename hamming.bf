[
hamming.bf - written by Bryan Ames, 2013

prompts for a 16 bit binary input (with the bits separated by newlines), and
prints a binary representation of the corresponding hamming code.
]



leave some space at the beginning
>>>>> >>


get data bits from user
P P D P D D D P D D D D D D D P D D D D D
 > >,> >,>,>,> >,>,>,>,>,>,>,> >,>,>,>,>,
<<<<< <<<<< <<<<< <<<<< <

convert to integer 0 and 1 instead of ascii '0' and '1'
>
>
>----- ----- ----- ----- ----- ----- ----- ----- ----- ---
>
>----- ----- ----- ----- ----- ----- ----- ----- ----- ---
>----- ----- ----- ----- ----- ----- ----- ----- ----- ---
>----- ----- ----- ----- ----- ----- ----- ----- ----- ---
>
>----- ----- ----- ----- ----- ----- ----- ----- ----- ---
>----- ----- ----- ----- ----- ----- ----- ----- ----- ---
>----- ----- ----- ----- ----- ----- ----- ----- ----- ---
>----- ----- ----- ----- ----- ----- ----- ----- ----- ---
>----- ----- ----- ----- ----- ----- ----- ----- ----- ---
>----- ----- ----- ----- ----- ----- ----- ----- ----- ---
>----- ----- ----- ----- ----- ----- ----- ----- ----- ---
>
>----- ----- ----- ----- ----- ----- ----- ----- ----- ---
>----- ----- ----- ----- ----- ----- ----- ----- ----- ---
>----- ----- ----- ----- ----- ----- ----- ----- ----- ---
>----- ----- ----- ----- ----- ----- ----- ----- ----- ---
>----- ----- ----- ----- ----- ----- ----- ----- ----- ---

<<<<< <<<<< <<<<< <<<<< <

!!!! function: generate hamming code for 8 bit integer !!!!!

the pointers in parens are the amount of moves it takes to get to and from the
parity counter; the parens are not interpreted they are only to make it more
readable (and to facilitate regex replacement when I had to copy paste this a
million times)

this part explicitly checks each of the bits that the first parity bit is
responsible for and stores the number of set bits in the cell before the data
1 <[-]>
  (>) [ (<) <+> (>) -]
  (<) <[>+ (>) + (<) <-]>

3 <[-]>
  (>>>) [ (<<<) <+> (>>>) -]
  (<<<) <[>+ (>>>) + (<<<) <-]>

5 <[-]>
  (>>>>>) [ (<<<<<) <+> (>>>>>) -]
  (<<<<<) <[>+ (>>>>>) + (<<<<<) <-]>

7 <[-]>
  (>>>>>>>) [ (<<<<<<<) <+> (>>>>>>>) -]
  (<<<<<<<) <[>+ (>>>>>>>) + (<<<<<<<) <-]>

9 <[-]>
  (>>>>>>>>>) [ (<<<<<<<<<) <+> (>>>>>>>>>) -]
  (<<<<<<<<<) <[>+ (>>>>>>>>>) + (<<<<<<<<<) <-]>

11<[-]>
  (>>>>>>>>>>>) [ (<<<<<<<<<<<) <+> (>>>>>>>>>>>) -]
  (<<<<<<<<<<<) <[>+ (>>>>>>>>>>>) + (<<<<<<<<<<<) <-]>

13<[-]>
  (>>>>>>>>>>>>>) [ (<<<<<<<<<<<<<) <+> (>>>>>>>>>>>>>) -]
  (<<<<<<<<<<<<<) <[>+ (>>>>>>>>>>>>>) + (<<<<<<<<<<<<<) <-]>

15<[-]>
  (>>>>>>>>>>>>>>>) [ (<<<<<<<<<<<<<<<) <+> (>>>>>>>>>>>>>>>) -]
  (<<<<<<<<<<<<<<<) <[>+ (>>>>>>>>>>>>>>>) + (<<<<<<<<<<<<<<<) <-]>

17<[-]>
  (>>>>>>>>>>>>>>>>>) [ (<<<<<<<<<<<<<<<<<) <+> (>>>>>>>>>>>>>>>>>) -]
  (<<<<<<<<<<<<<<<<<) <[>+ (>>>>>>>>>>>>>>>>>) + (<<<<<<<<<<<<<<<<<) <-]>

19<[-]>
  (>>>>>>>>>>>>>>>>>>>) [ (<<<<<<<<<<<<<<<<<<<) <+> (>>>>>>>>>>>>>>>>>>>) -]
  (<<<<<<<<<<<<<<<<<<<) <[>+ (>>>>>>>>>>>>>>>>>>>) + (<<<<<<<<<<<<<<<<<<<) <-]>

21<[-]>
  (>>>>>>>>>>>>>>>>>>>>>) [ (<<<<<<<<<<<<<<<<<<<<<) <+> (>>>>>>>>>>>>>>>>>>>>>) -]
  (<<<<<<<<<<<<<<<<<<<<<) <[>+ (>>>>>>>>>>>>>>>>>>>>>) + (<<<<<<<<<<<<<<<<<<<<<) <-]>


init the beginning spaces for an upcoming calculation
<[-]<[-]<[-]<[-]<[-]<[-]>>>>>>

move the bit counter value to a new position to make space
[<<<<<<+>>>>>>-]

compute counter % 2 (this is the parity bit)
<<<<<++<[->-[>+>]>[<++>->>]<<<<]

move parity bit into the hamming code
>>[->>>>>+<<<<<]

get back into position for parity bit 2
>>>>


repeat
2 <[-]>
  (>>) [ (<<) <+> (>>) -]
  (<<) <[>+ (>>) + (<<) <-]>

3 <[-]>
  (>>>) [ (<<<) <+> (>>>) -]
  (<<<) <[>+ (>>>) + (<<<) <-]>

6 <[-]>
  (>>>>>>) [ (<<<<<<) <+> (>>>>>>) -]
  (<<<<<<) <[>+ (>>>>>>) + (<<<<<<) <-]>

7 <[-]>
  (>>>>>>>) [ (<<<<<<<) <+> (>>>>>>>) -]
  (<<<<<<<) <[>+ (>>>>>>>) + (<<<<<<<) <-]>

10 <[-]>
  (>>>>>>>>>>) [ (<<<<<<<<<<) <+> (>>>>>>>>>>) -]
  (<<<<<<<<<<) <[>+ (>>>>>>>>>>) + (<<<<<<<<<<) <-]>

11 <[-]>
  (>>>>>>>>>>>) [ (<<<<<<<<<<<) <+> (>>>>>>>>>>>) -]
  (<<<<<<<<<<<) <[>+ (>>>>>>>>>>>) + (<<<<<<<<<<<) <-]>

14 <[-]>
  (>>>>>>>>>>>>>>) [ (<<<<<<<<<<<<<<) <+> (>>>>>>>>>>>>>>) -]
  (<<<<<<<<<<<<<<) <[>+ (>>>>>>>>>>>>>>) + (<<<<<<<<<<<<<<) <-]>

15 <[-]>
  (>>>>>>>>>>>>>>>) [ (<<<<<<<<<<<<<<<) <+> (>>>>>>>>>>>>>>>) -]
  (<<<<<<<<<<<<<<<) <[>+ (>>>>>>>>>>>>>>>) + (<<<<<<<<<<<<<<<) <-]>

18 <[-]>
  (>>>>>>>>>>>>>>>>>>) [ (<<<<<<<<<<<<<<<<<<) <+> (>>>>>>>>>>>>>>>>>>) -]
  (<<<<<<<<<<<<<<<<<<) <[>+ (>>>>>>>>>>>>>>>>>>) + (<<<<<<<<<<<<<<<<<<) <-]>

19 <[-]>
  (>>>>>>>>>>>>>>>>>>>) [ (<<<<<<<<<<<<<<<<<<<) <+> (>>>>>>>>>>>>>>>>>>>) -]
  (<<<<<<<<<<<<<<<<<<<) <[>+ (>>>>>>>>>>>>>>>>>>>) + (<<<<<<<<<<<<<<<<<<<) <-]>


init the beginning spaces for an upcoming calculation
<[-]<[-]<[-]<[-]<[-]<[-]>>>>>>

move the counter value to a new position to make space
[<<<<<<+>>>>>>-]

compute counter % 2 (this is the parity bit)
<<<<<++<[->-[>+>]>[<++>->>]<<<<]

move parity bit into hamming code
>>[->>>>>>+<<<<<<]


get back into position for parity bit 3
>>>>

repeat
4 <[-]>
  (>>>>) [ (<<<<) <+> (>>>>) -]
  (<<<<) <[>+ (>>>>) + (<<<<) <-]>

5 <[-]>
  (>>>>>) [ (<<<<<) <+> (>>>>>) -]
  (<<<<<) <[>+ (>>>>>) + (<<<<<) <-]>

6 <[-]>
  (>>>>>>) [ (<<<<<<) <+> (>>>>>>) -]
  (<<<<<<) <[>+ (>>>>>>) + (<<<<<<) <-]>

7 <[-]>
  (>>>>>>>) [ (<<<<<<<) <+> (>>>>>>>) -]
  (<<<<<<<) <[>+ (>>>>>>>) + (<<<<<<<) <-]>

12 <[-]>
  (>>>>>>>>>>>>) [ (<<<<<<<<<<<<) <+> (>>>>>>>>>>>>) -]
  (<<<<<<<<<<<<) <[>+ (>>>>>>>>>>>>) + (<<<<<<<<<<<<) <-]>

13 <[-]>
  (>>>>>>>>>>>>>) [ (<<<<<<<<<<<<<) <+> (>>>>>>>>>>>>>) -]
  (<<<<<<<<<<<<<) <[>+ (>>>>>>>>>>>>>) + (<<<<<<<<<<<<<) <-]>

14 <[-]>
  (>>>>>>>>>>>>>>) [ (<<<<<<<<<<<<<<) <+> (>>>>>>>>>>>>>>) -]
  (<<<<<<<<<<<<<<) <[>+ (>>>>>>>>>>>>>>) + (<<<<<<<<<<<<<<) <-]>

15 <[-]>
  (>>>>>>>>>>>>>>>) [ (<<<<<<<<<<<<<<<) <+> (>>>>>>>>>>>>>>>) -]
  (<<<<<<<<<<<<<<<) <[>+ (>>>>>>>>>>>>>>>) + (<<<<<<<<<<<<<<<) <-]>

20 <[-]>
  (>>>>>>>>>>>>>>>>>>>>) [ (<<<<<<<<<<<<<<<<<<<<) <+> (>>>>>>>>>>>>>>>>>>>>) -]
  (<<<<<<<<<<<<<<<<<<<<) <[>+ (>>>>>>>>>>>>>>>>>>>>) + (<<<<<<<<<<<<<<<<<<<<) <-]>

21 <[-]>
  (>>>>>>>>>>>>>>>>>>>>>) [ (<<<<<<<<<<<<<<<<<<<<<) <+> (>>>>>>>>>>>>>>>>>>>>>) -]
  (<<<<<<<<<<<<<<<<<<<<<) <[>+ (>>>>>>>>>>>>>>>>>>>>>) + (<<<<<<<<<<<<<<<<<<<<<) <-]>


init the beginning spaces for an upcoming calculation
<[-]<[-]<[-]<[-]<[-]<[-]>>>>>>

move the counter value to a new position to make space
[<<<<<<+>>>>>>-]

compute counter % 2 (this is the parity bit)
<<<<<++<[->-[>+>]>[<++>->>]<<<<]

move parity bit into hamming code
>>[->>>>>>>>+<<<<<<<<]

get back into position for parity bit 4
>>>>

repeat
8 <[-]>
  (>>>>>>>>) [ (<<<<<<<<) <+> (>>>>>>>>) -]
  (<<<<<<<<) <[>+ (>>>>>>>>) + (<<<<<<<<) <-]>

9 <[-]>
  (>>>>>>>>>) [ (<<<<<<<<<) <+> (>>>>>>>>>) -]
  (<<<<<<<<<) <[>+ (>>>>>>>>>) + (<<<<<<<<<) <-]>

10 <[-]>
  (>>>>>>>>>>) [ (<<<<<<<<<<) <+> (>>>>>>>>>>) -]
  (<<<<<<<<<<) <[>+ (>>>>>>>>>>) + (<<<<<<<<<<) <-]>

11 <[-]>
  (>>>>>>>>>>>) [ (<<<<<<<<<<<) <+> (>>>>>>>>>>>) -]
  (<<<<<<<<<<<) <[>+ (>>>>>>>>>>>) + (<<<<<<<<<<<) <-]>

12 <[-]>
  (>>>>>>>>>>>>) [ (<<<<<<<<<<<<) <+> (>>>>>>>>>>>>) -]
  (<<<<<<<<<<<<) <[>+ (>>>>>>>>>>>>) + (<<<<<<<<<<<<) <-]>

13 <[-]>
  (>>>>>>>>>>>>>) [ (<<<<<<<<<<<<<) <+> (>>>>>>>>>>>>>) -]
  (<<<<<<<<<<<<<) <[>+ (>>>>>>>>>>>>>) + (<<<<<<<<<<<<<) <-]>

14 <[-]>
  (>>>>>>>>>>>>>>) [ (<<<<<<<<<<<<<<) <+> (>>>>>>>>>>>>>>) -]
  (<<<<<<<<<<<<<<) <[>+ (>>>>>>>>>>>>>>) + (<<<<<<<<<<<<<<) <-]>

15 <[-]>
  (>>>>>>>>>>>>>>>) [ (<<<<<<<<<<<<<<<) <+> (>>>>>>>>>>>>>>>) -]
  (<<<<<<<<<<<<<<<) <[>+ (>>>>>>>>>>>>>>>) + (<<<<<<<<<<<<<<<) <-]>


init the beginning spaces for an upcoming calculation
<[-]<[-]<[-]<[-]<[-]<[-]>>>>>>

move the counter value to a new position to make space
[<<<<<<+>>>>>>-]

compute counter % 2 (this is the parity bit)
<<<<<++<[->-[>+>]>[<++>->>]<<<<]

move parity bit into hamming code
>>[->>>>>>>>>>>>+<<<<<<<<<<<<]

get back into position for parity bit 5
>>>>

repeat
16 <[-]>
  (>>>>>>>>>>>>>>>>) [ (<<<<<<<<<<<<<<<<) <+> (>>>>>>>>>>>>>>>>) -]
  (<<<<<<<<<<<<<<<<) <[>+ (>>>>>>>>>>>>>>>>) + (<<<<<<<<<<<<<<<<) <-]>

17 <[-]>
  (>>>>>>>>>>>>>>>>>) [ (<<<<<<<<<<<<<<<<<) <+> (>>>>>>>>>>>>>>>>>) -]
  (<<<<<<<<<<<<<<<<<) <[>+ (>>>>>>>>>>>>>>>>>) + (<<<<<<<<<<<<<<<<<) <-]>

18 <[-]>
  (>>>>>>>>>>>>>>>>>>) [ (<<<<<<<<<<<<<<<<<<) <+> (>>>>>>>>>>>>>>>>>>) -]
  (<<<<<<<<<<<<<<<<<<) <[>+ (>>>>>>>>>>>>>>>>>>) + (<<<<<<<<<<<<<<<<<<) <-]>

19 <[-]>
  (>>>>>>>>>>>>>>>>>>>) [ (<<<<<<<<<<<<<<<<<<<) <+> (>>>>>>>>>>>>>>>>>>>) -]
  (<<<<<<<<<<<<<<<<<<<) <[>+ (>>>>>>>>>>>>>>>>>>>) + (<<<<<<<<<<<<<<<<<<<) <-]>

20 <[-]>
  (>>>>>>>>>>>>>>>>>>>>) [ (<<<<<<<<<<<<<<<<<<<<) <+> (>>>>>>>>>>>>>>>>>>>>) -]
  (<<<<<<<<<<<<<<<<<<<<) <[>+ (>>>>>>>>>>>>>>>>>>>>) + (<<<<<<<<<<<<<<<<<<<<) <-]>

21 <[-]>
  (>>>>>>>>>>>>>>>>>>>>>) [ (<<<<<<<<<<<<<<<<<<<<<) <+> (>>>>>>>>>>>>>>>>>>>>>) -]
  (<<<<<<<<<<<<<<<<<<<<<) <[>+ (>>>>>>>>>>>>>>>>>>>>>) + (<<<<<<<<<<<<<<<<<<<<<) <-]>


init the beginning spaces for an upcoming calculation
<[-]<[-]<[-]<[-]<[-]<[-]>>>>>>

move the counter value to a new position to make space
[<<<<<<+>>>>>>-]

compute counter % 2 (this is the parity bit)
<<<<<++<[->-[>+>]>[<++>->>]<<<<]

move parity bit into hamming code
>>[->>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<]

get into position for printing
>>>>

convert the hamming code into the integer values for ascii '0' and '1' then
print them to stdout
>+++++ +++++ +++++ +++++ +++++ +++++ +++++ +++++ +++++ +++ .
>+++++ +++++ +++++ +++++ +++++ +++++ +++++ +++++ +++++ +++ .
>+++++ +++++ +++++ +++++ +++++ +++++ +++++ +++++ +++++ +++ .
>+++++ +++++ +++++ +++++ +++++ +++++ +++++ +++++ +++++ +++ .
>+++++ +++++ +++++ +++++ +++++ +++++ +++++ +++++ +++++ +++ .
>+++++ +++++ +++++ +++++ +++++ +++++ +++++ +++++ +++++ +++ .
>+++++ +++++ +++++ +++++ +++++ +++++ +++++ +++++ +++++ +++ .
>+++++ +++++ +++++ +++++ +++++ +++++ +++++ +++++ +++++ +++ .
>+++++ +++++ +++++ +++++ +++++ +++++ +++++ +++++ +++++ +++ .
>+++++ +++++ +++++ +++++ +++++ +++++ +++++ +++++ +++++ +++ .
>+++++ +++++ +++++ +++++ +++++ +++++ +++++ +++++ +++++ +++ .
>+++++ +++++ +++++ +++++ +++++ +++++ +++++ +++++ +++++ +++ .
>+++++ +++++ +++++ +++++ +++++ +++++ +++++ +++++ +++++ +++ .
>+++++ +++++ +++++ +++++ +++++ +++++ +++++ +++++ +++++ +++ .
>+++++ +++++ +++++ +++++ +++++ +++++ +++++ +++++ +++++ +++ .
>+++++ +++++ +++++ +++++ +++++ +++++ +++++ +++++ +++++ +++ .
>+++++ +++++ +++++ +++++ +++++ +++++ +++++ +++++ +++++ +++ .
>+++++ +++++ +++++ +++++ +++++ +++++ +++++ +++++ +++++ +++ .
>+++++ +++++ +++++ +++++ +++++ +++++ +++++ +++++ +++++ +++ .
>+++++ +++++ +++++ +++++ +++++ +++++ +++++ +++++ +++++ +++ .
>+++++ +++++ +++++ +++++ +++++ +++++ +++++ +++++ +++++ +++ .
